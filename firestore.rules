
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthed() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    match /users/{userId} {
      allow read: if isAuthed();
      allow write: if isOwner(userId);
    }
    
    match /competitors/{competitorId} {
        allow read: if true;
        allow write: if isAuthed(); // Or more specific rules, e.g. admins
    }

    match /events/{eventId} {
      allow get: if true; // anyone can view a single event
      allow list: if isAuthed(); // only signed-in users can list all events
      allow create: if isAuthed() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isAuthed() && get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      // Deletes are handled by the backend cloud function now, so no client-side delete rule is needed.
      allow delete: if false; 
      
      match /entries/{entryId} {
        allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
        // writes are handled by cloud functions which check ownership
        allow write: if isAuthed(); 
      }
      
      match /stages/{stageId} {
        allow read: if true; // Public read access
        allow write: if get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      }
      
      match /announcements/{annId} {
        // Only allow listing of published announcements.
        // Get is allowed for any authenticated user, UI should not link to drafts for non-owners.
        allow get: if isAuthed();
        allow list: if request.query.where.get('status', ['published']) == ['published'];
        allow write: if get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      }

      match /files/{fileId} {
        allow read: if true;
        allow write: if get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      }
    }
    
    match /dashboard_summary/{userId} {
      allow read: if isOwner(userId);
      // Writes should only be from trusted server environments (cloud functions)
      allow write: if false; 
    }

    match /audit_logs/{logId} {
      allow read: if false; // Admin/internal only
      allow write: if false; // Functions only
    }
  }
}
