rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isEventOwner(eventId) {
      return isSignedIn() &&
        get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }

    match /users/{uid} {
      // Admins can read any user profile, users can read/update their own
      allow read: if request.auth.token.role == 'admin' || (isSignedIn() && request.auth.uid == uid);
      allow update: if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn();
    }

    match /dashboard_summary/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow write: if false; // Cloud Functions only
    }

    match /events/{eventId} {
      allow read: if true; // Publicly readable
      allow create: if isSignedIn() && request.resource.data.organizerId == request.auth.uid;
      allow update, delete: if isEventOwner(eventId);

      match /stages/{stageId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
      match /entries/{entryId} {
        allow read: if isSignedIn();
        allow write: if isEventOwner(eventId);
      }
      match /announcements/{annId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
    }
  }
}