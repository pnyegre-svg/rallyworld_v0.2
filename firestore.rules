rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isEventOwner(eventId) {
      return isSignedIn() && get(/databases/$(db)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }

    function isEventPublic(eventId) {
      return get(/databases/$(db)/documents/events/$(eventId)).data.public == true;
    }

    // User profiles can be read by anyone, but only the owner can write.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
    }
    
    // Organizers can see their own dashboard summary.
    match /dashboard_summary/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Events can be read by the public if flagged, otherwise only by signed-in users.
    // Events can only be written to by their owner.
    match /events/{eventId} {
      allow read: if isEventPublic(eventId) || isSignedIn();
      allow write: if isEventOwner(eventId);
    }
    
    // Subcollections follow event permissions.
    match /events/{eventId}/{subcollection}/{docId} {
       allow read: if isEventPublic(eventId) || isSignedIn();
       allow write: if isEventOwner(eventId);
    }

    // Announcements have a more specific public read rule.
    match /events/{eventId}/announcements/{annId} {
      allow read: if (isEventPublic(eventId) && resource.data.status == 'published') || isSignedIn();
      allow write: if isEventOwner(eventId);
    }
    
    // Competitors list is public.
    match /competitors/{docId} {
        allow read;
        // Write rules would go here if organizers could edit them.
    }
    
    // Audit logs are write-only by cloud functions (no client access).
    match /audit_logs/{logId} {
      allow read, write: if false;
    }
  }
}
