rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthed() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    function isEventOwner(eventId) {
      let doc = get(/databases/$(database)/documents/events/$(eventId));
      return doc.data.organizerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isAuthed();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /competitors/{competitorId} {
        allow read: if true;
        allow write: if isAuthed();
    }

    match /events/{eventId} {
      allow get: if true;
      allow list: if isAuthed();
      
      allow create: if isAuthed() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isAuthed() && isEventOwner(eventId);
      // Deletes are handled by a secure Cloud Function, not directly by clients.
      allow delete: if false;

      match /entries/{entryId} {
        allow read: if isEventOwner(eventId);
        // Let cloud functions handle authZ for writes
        allow write: if isAuthed(); 
      }
      
      match /stages/{stageId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
      
      match /announcements/{annId} {
        // Anyone can get a single announcement if it's published. The owner can get any.
        allow get: if resource.data.status == 'published' || isEventOwner(eventId);
        // Anyone can list published announcements. The owner can list all.
        allow list: if request.query.get('status') == 'published' || isEventOwner(eventId);
        // The owner can write to announcements.
        allow write: if isEventOwner(eventId);
      }

      match /files/{fileId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
    }
    
    match /dashboard_summary/{userId} {
      allow read: if isOwner(userId);
      // Writes should only be from trusted server environments (cloud functions)
      allow write: if false; 
    }

    match /audit_logs/{logId} {
      allow read: if false; // Admin/internal only
      allow write: if false; // Functions only
    }
  }
}
