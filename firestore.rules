rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthed() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    function isEventOwner(eventId) {
      return get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isAuthed();
      allow write: if isOwner(userId);
    }
    
    match /competitors/{competitorId} {
        allow read: if true;
        allow write: if isAuthed(); // Or more specific rules, e.g. admins
    }

    match /events/{eventId} {
      allow get: if true; // anyone can view a single event
      allow list: if isAuthed(); // only signed-in users can list all events

      // Split write into create, update, delete for clarity and correctness
      allow create: if isAuthed() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isAuthed() && isEventOwner(eventId);
      allow delete: if isAuthed() && isEventOwner(eventId);
      
      match /entries/{entryId} {
        allow read: if isEventOwner(eventId);
        allow write: if isAuthed(); // Let cloud functions handle authZ
      }
      
      match /stages/{stageId} {
        allow read: if true; // Public read access
        allow write: if isEventOwner(eventId);
      }
      
      match /announcements/{annId} {
        allow read: if resource.data.status == 'published';
        allow write: if isEventOwner(eventId);
      }

      match /files/{fileId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
    }
    
    match /dashboard_summary/{userId} {
      allow read: if isOwner(userId);
      // Writes should only be from trusted server environments (cloud functions)
      allow write: if false; 
    }

    match /audit_logs/{logId} {
      allow read: if false; // Admin/internal only
      allow write: if false; // Functions only
    }
  }
}
