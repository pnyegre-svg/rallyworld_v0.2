rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthed() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    function isEventOwner(eventId) {
      let doc = get(/databases/$(database)/documents/events/$(eventId));
      // Check for existence before accessing data
      return doc.exists && doc.data.organizerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isAuthed();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      // No explicit delete rule, so it's disallowed by default
    }
    
    match /competitors/{competitorId} {
        allow read: if true;
        allow write: if isAuthed(); 
    }

    match /events/{eventId} {
      allow get: if true;
      allow list: if isAuthed();
      
      // For create, check the incoming resource
      allow create: if isAuthed() && request.resource.data.organizerId == request.auth.uid;
      // For update, check the existing resource
      allow update: if isAuthed() && isEventOwner(eventId);
      // Delete is handled by a Cloud Function, so no client-side delete permission is needed.
      allow delete: if false; 
      
      match /entries/{entryId} {
        allow read: if isEventOwner(eventId);
        allow write: if isAuthed(); // Let cloud functions handle authZ
      }
      
      match /stages/{stageId} {
        allow read: if true; // Public read access
        allow write: if isEventOwner(eventId);
      }
      
      match /announcements/{annId} {
        allow get: if true; // Public can read any single announcement
        // Allow listing documents only if they are published, or if you are the owner
        allow list: if isEventOwner(eventId) || request.query.where.status == 'published';
        allow write: if isEventOwner(eventId);
      }

      match /files/{fileId} {
        allow read: if true;
        allow write: if isEventOwner(eventId);
      }
    }
    
    match /dashboard_summary/{userId} {
      allow read: if isOwner(userId);
      // Writes should only be from trusted server environments (cloud functions)
      allow write: if false; 
    }

    match /audit_logs/{logId} {
      allow read: if false; // Admin/internal only
      allow write: if false; // Functions only
    }
  }
}
