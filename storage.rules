rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isSignedIn() { return request.auth != null; }
    function isOwner(eventId) {
      return isSignedIn() &&
        get(/databases/(default)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }
    function isEventPublic(eventId) {
      return get(/databases/(default)/documents/events/$(eventId)).data.public == true;
    }
    function typeAllowed() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.*') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('text/plain');
    }
    function extAllowed() {
      return request.resource.name.matches('(?i)events/[^/]+/.*\\.(pdf|jpe?g|png|gif|webp|heic|heif|docx?|xlsx?|pptx?|txt)$');
    }
    // images <= 64MB, else <= 20MB
    function withinSize() {
      return (request.resource.contentType.matches('image/.*') && request.resource.size < 64 * 1024 * 1024) ||
             (!request.resource.contentType.matches('image/.*') && request.resource.size < 20 * 1024 * 1024);
    }

    match /public/{allPaths=**} {
      allow read: if true;
    }

    match /events/{eventId}/{path=**} {
      allow read: if isSignedIn() || isEventPublic(eventId);
      allow write: if isOwner(eventId) && withinSize() && (typeAllowed() || extAllowed());
      allow delete: if isOwner(eventId);
    }
  }
}
