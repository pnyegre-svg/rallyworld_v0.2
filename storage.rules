rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Default deny all access unless a specific rule allows it.
    // This is a security best practice.
    // Default deny all reads and writes
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Allow public read access to any files within the /public directory.
    // This is necessary for visitors to see images like event covers.
    // Allow public read on all files inside the /public/ directory
    match /public/{allPaths=**} {
      allow read: if true;
    }

    // Rules for organizer-specific uploads (e.g., profile pictures).
    // Users can only write to their own folder, specified by their user ID (uid).
    // Allow a signed-in user to write to a folder matching their UID
    // This is the key rule for secure uploads.
    match /public/organizers/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for event-specific assets (e.g., event covers, documents).
    // Currently, this allows any authenticated user to upload event assets.
    // This can be tightened later by adding an `ownerUid` to event documents.
    // Allow any signed-in user to write to event folders.
    // In a future step, this could be locked down to the event owner.
    match /public/events/{eventId}/{allPaths=**} {
      allow read: if true;
      // TODO: Restrict write access to the event owner.
      // This requires storing the owner's auth uid on the event document.
      // Example of a more secure rule for the future:
      // allow write: if request.auth != null && get(/databases/(default)/documents/events/$(eventId)).data.ownerUid == request.auth.uid;
      allow write: if request.auth != null;
    }
  }
}
